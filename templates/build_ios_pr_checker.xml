<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
    <actions/>
    <description></description>
    <keepDependencies>false</keepDependencies>
    <properties>
        {% if log_rotate > 0 %}
            <jenkins.model.BuildDiscarderProperty>
                <strategy class="hudson.tasks.LogRotator">
                    <daysToKeep>-1</daysToKeep>
                    <numToKeep>{{log_rotate}}</numToKeep>
                    <artifactDaysToKeep>-1</artifactDaysToKeep>
                    <artifactNumToKeep>-1</artifactNumToKeep>
                </strategy>
            </jenkins.model.BuildDiscarderProperty>
        {% endif %}
        <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
        <hudson.model.ParametersDefinitionProperty>
             <parameterDefinitions>
                 {% if branch == "" %}
                    <hudson.model.StringParameterDefinition>
                        <name>Branch</name>
                        <description></description>
                        <defaultValue>dev</defaultValue>
                        <trim>false</trim>
                    </hudson.model.StringParameterDefinition>
                 {% endif %}
                     <hudson.model.ChoiceParameterDefinition>
                         <name>Lane</name>
                         <description></description>
                         <choices class="java.util.Arrays$ArrayList">
                             <a class="string-array">
                                 {% for value in ['DemoRC', 'Night', 'Release', 'Demo Night']%}
                                 <string>{{value}}</string>
                                 {% endfor %}
                             </a>
                         </choices>
                     </hudson.model.ChoiceParameterDefinition>
                 {% for p in parameters %}
                    {% if p['is_parameterizable'] %}
                        {% if p['type'] == 'string' %}
                            <hudson.model.StringParameterDefinition>
                                <name>{{p['name']}}</name>
                                <description>{{p['description']}}</description>
                                <defaultValue>{{p['default_value']}}</defaultValue>
                                <trim>false</trim>
                            </hudson.model.StringParameterDefinition>
                        {% endif %}
                        {% if p['type'] == 'boolean'  %}
                            <hudson.model.BooleanParameterDefinition>
                                <name>{{p['name']}}</name>
                                <description>{{p['description']}}</description>
                                <defaultValue>{{p['default_value']}}</defaultValue>
                            </hudson.model.BooleanParameterDefinition>
                        {% endif %}
                        {% if p['type'] == 'choice' %}
                            <hudson.model.ChoiceParameterDefinition>
                                <name>{{p['name']}}</name>
                                <description>{{p['description']}}</description>
                                <choices class="java.util.Arrays$ArrayList">
                                    <a class="string-array">
                                        {% for value in p['values'] %}
                                            <string>{{value}}</string>
                                        {% endfor %}
                                    </a>
                                </choices>
                            </hudson.model.ChoiceParameterDefinition>
                        {% endif %}
                    {% endif %}
                {% endfor %}
            </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        {% if cron['poll_scm'] != '' %}
            <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
              <triggers>
                    <hudson.triggers.SCMTrigger>
                        <spec>{{cron['poll_scm']}}</spec>
                    </hudson.triggers.SCMTrigger>
              </triggers>
            </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        {% endif %}
    </properties>
    {% if cron['build'] != '' %}
        <triggers>
            <hudson.triggers.TimerTrigger>
                <spec>{{cron['build']}}</spec>
            </hudson.triggers.TimerTrigger>
        </triggers>
    {% endif %}
    <concurrentBuild>false</concurrentBuild>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.65">
        <script>
import hudson.model.*
import hudson.model.AbstractProject
import hudson.tasks.Mailer

def build_ok = true


BUILD_JOB_NAME = "${JOB_NAME}"

pipeline {
    agent { node { label '{{label}}' } }
    stages {
        stage('Slack Notification Starting') {
            steps {
                script {
                    slackSend channel: '{{slack_channel}}', message: "Build ${env.JOB_NAME.replace('/', ' > ')} - #${env.BUILD_DISPLAY_NAME} started (&lt;${env.BUILD_URL}|Open>)", color: '#439FE0', botUser: true, teamDomain: 'deliveryhero', tokenCredentialId: 'SlackToken'
                }
            }
        }
        stage('Preparation') {
            steps {
                script {
                    currentBuild.displayName = "Build_" + "${BUILD_TIMESTAMP}"
                }
                checkout([$class: 'GitSCM',
                    branches: [[name: "${params.Branch}"]],
                    extensions: [[$class: 'CloneOption', timeout: 120]],
                    gitTool: 'Default',
                    userRemoteConfigs: [[url: '{{repository}}']]
                ])
            }
        }
        stage('Unlock Keychain') {
            steps {
                sh "security unlock-keychain -p Automation01 ~/Library/Keychains/login.keychain"
            }
        }
        stage('Install Pods') {
            steps {
                script {
                    try {
                        sh "rm Podfile.lock"
                        sh "export LANG=en_US.UTF-8 &amp;&amp; /usr/local/bin/pod repo update"
                        sh "export LANG=en_US.UTF-8 &amp;&amp; /usr/local/bin/pod install"
                    } catch (exc) {
                        currentBuild.result = 'FAILED'
                        build_ok = false
                    }
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    try {
                        sh "/usr/bin/xcodebuild -scheme 'PedidosYa! Demo' -workspace './PedidosYa!.xcworkspace'  -configuration 'Debug' CODE_SIGN_IDENTITY='' CODE_SIGNING_REQUIRED=NO -derivedDataPath './' -destination 'id={{iphone_udid}}'"
                    } catch (exc) {
                        currentBuild.result = 'FAILED'
                        build_ok = false
                    }
                }
            }
        }
        stage('Set Status') {
            steps {
                script {
                    if (build_ok) {
                        httpRequest acceptType: 'APPLICATION_JSON', consoleLogResponseBody: true, contentType: 'APPLICATION_JSON_UTF8', customHeaders: [[maskValue: false, name: 'Authorization', value: 'token eda6d65fd4a1c3aa1448aa7fbd729e3ea6973880']], httpMode: 'POST', ignoreSslErrors: true, requestBody: '{ "state": "success", "target_url": "' + "${env.BUILD_URL}" + '", "description": "Build success!", "context": "athenea/pull-request-validator" }', responseHandle: 'NONE', url: "https://api.github.com/repos/pedidosya/iphone-app/statuses/${params.Branch}"
                    } else {
                        httpRequest acceptType: 'APPLICATION_JSON', consoleLogResponseBody: true, contentType: 'APPLICATION_JSON_UTF8', customHeaders: [[maskValue: false, name: 'Authorization', value: 'token eda6d65fd4a1c3aa1448aa7fbd729e3ea6973880']], httpMode: 'POST', ignoreSslErrors: true, requestBody: '{ "state": "failure", "target_url": "' + "${env.BUILD_URL}" + '", "description": "Build failure!", "context": "athenea/pull-request-validator" }', responseHandle: 'NONE', url: "https://api.github.com/repos/pedidosya/iphone-app/statuses/${params.Branch}"
                    }
                }
            }
        }
        stage('Slack Notification Finishing') {
            steps {
                script {
                    def status = ""
                    def color = ""
                    if(build_ok) {
                        status = "success"
                        color = "good"
                    } else {
                        status = "failed"
                        color = "danger"
                    }
                    slackSend channel: '{{slack_channel}}', message: "Build ${env.JOB_NAME.replace('/', ' > ')} - #${env.BUILD_DISPLAY_NAME} was ${status} after ${currentBuild.durationString.replace(' and counting', '')} (&lt;${env.BUILD_URL}|Open>)", color: "${color}", botUser: true, teamDomain: 'deliveryhero', tokenCredentialId: 'SlackToken'
                }
            }
        }
    }
}
        </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>