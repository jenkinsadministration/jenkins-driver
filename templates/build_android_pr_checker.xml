<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
    <actions/>
    <description></description>
    <keepDependencies>false</keepDependencies>
    <properties>
        {% if log_rotate > 0 %}
            <jenkins.model.BuildDiscarderProperty>
                <strategy class="hudson.tasks.LogRotator">
                    <daysToKeep>-1</daysToKeep>
                    <numToKeep>{{log_rotate}}</numToKeep>
                    <artifactDaysToKeep>-1</artifactDaysToKeep>
                    <artifactNumToKeep>-1</artifactNumToKeep>
                </strategy>
            </jenkins.model.BuildDiscarderProperty>
        {% endif %}
        <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
        {% if show_parameters %}
        <hudson.model.ParametersDefinitionProperty>
             <parameterDefinitions>
                 {% include './partials/jenkins/_parameters.txt' with context %}
            </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        {% endif %}
        {% include './partials/jenkins/_cron.txt' with context %}
    </properties>
    <concurrentBuild>false</concurrentBuild>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.65">
        <script>
import hudson.model.*
import hudson.model.AbstractProject
import hudson.tasks.Mailer

def build_ok = true
def test_ok = true
def lint_ok = true


BUILD_JOB_NAME = "${JOB_NAME}"

pipeline {
    agent { node { label '{{label}}' } }
    stages {
        stage('Set Build Name') {
            steps {
                script {
                    currentBuild.displayName = "Build_" + "${BUILD_TIMESTAMP}"
                }
            }
        }
        stage('Slack Notification') {
            steps {
                script {
                    slackSend channel: '{{slack_channel}}', message: "Build ${env.JOB_NAME.replace('/', ' > ')} - #${env.BUILD_DISPLAY_NAME} started (&lt;${env.BUILD_URL}|Open>)", color: '#439FE0', botUser: true, teamDomain: 'deliveryhero', tokenCredentialId: 'SlackToken'
                }
            }
        }
        stage('Clean') {
            steps {
                script {
                    try {
                        sh "cd ./PedidosYaAS &amp;&amp; rm -rf build  &amp;&amp; cd .."
                    } catch (exc) {}
                }
            }
        }
        stage('Preparation') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "${params.Branch}"]],
                    extensions: [[$class: 'CloneOption', timeout: 120]],
                    gitTool: 'Default',
                    userRemoteConfigs: [[url: '{{repository}}']]
                ])
            }
        }
        stage('Clean') {
            steps {
                script {
                    sh "cd ./PedidosYaAS &amp;&amp; /usr/bin/gradle clean"
                }
            }
        }
        stage('Unit Tests') {
            steps {
                script {
                    try {
                        sh "cd ./PedidosYaAS &amp;&amp; /usr/bin/gradle testPeyaStagingPeyaReleaseUnitTest"
                    } catch (exc) {
                        currentBuild.result = 'FAILED'
                        test_ok = false
                    }
                }
            }
        }
        stage('Lint') {
            steps {
                script {
                    try {
                        sh "cd ./PedidosYaAS &amp;&amp; /usr/bin/gradle lintPeyaStagingPeyaRelease"
                    } catch (exc) {
                        currentBuild.result = 'FAILED'
                        lint_ok = false
                    }
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    try {
                        sh "cd ./PedidosYaAS &amp;&amp; /usr/bin/gradle assemblePeyaStagingPeyaRelease"
                    } catch (exc) {
                        currentBuild.result = 'FAILED'
                        build_ok = false
                    }
                    sh "cd .."
                }
            }
        }
        stage('Set Status') {
            steps {
                script {
                    build job:
                        "PullRequestChecker/Set_PR_Status",
                        parameters: [
                            string(name: 'SHA', value: "${params.Branch}"),
                            string(name: 'Repository', value: "android-mobile"),
                            string(name: 'JobUrl', value: "${env.BUILD_URL}"),
                            booleanParam(name: 'Status', value: build_ok)
                        ],
                        propagate: false,
                        wait: false
                }
            }
        }
        stage('Slack Notification Finishing') {
            steps {
                script {
                    def status = ""
                    def color = ""
                    if(build_ok) {
                        status = "success"
                        color = "good"
                    } else {
                        status = "failed"
                        color = "danger"
                    }
                    slackSend channel: '{{slack_channel}}', message: "Build ${env.JOB_NAME.replace('/', ' > ')} - #${env.BUILD_DISPLAY_NAME} was ${status} after ${currentBuild.durationString.replace(' and counting', '')} (&lt;${env.BUILD_URL}|Open>)", color: "${color}", botUser: true, teamDomain: 'deliveryhero', tokenCredentialId: 'SlackToken'
                }
            }
        }
    }
}
        </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>