<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
    <actions/>
    <description></description>
    <keepDependencies>false</keepDependencies>
    <properties>
        {% if log_rotate > 0 %}
            <jenkins.model.BuildDiscarderProperty>
                <strategy class="hudson.tasks.LogRotator">
                    <daysToKeep>-1</daysToKeep>
                    <numToKeep>{{log_rotate}}</numToKeep>
                    <artifactDaysToKeep>-1</artifactDaysToKeep>
                    <artifactNumToKeep>-1</artifactNumToKeep>
                </strategy>
            </jenkins.model.BuildDiscarderProperty>
        {% endif %}
        <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
        <hudson.model.ParametersDefinitionProperty>
             <parameterDefinitions>
                 {% if branch == "" %}
                    <hudson.model.StringParameterDefinition>
                        <name>Branch</name>
                        <description></description>
                        <defaultValue>dev</defaultValue>
                        <trim>false</trim>
                    </hudson.model.StringParameterDefinition>
                 {% endif %}
                     <hudson.model.ChoiceParameterDefinition>
                         <name>Lane</name>
                         <description></description>
                         <choices class="java.util.Arrays$ArrayList">
                             <a class="string-array">
                                 {% for value in ['DemoRC', 'Night', 'Release', 'Demo Night']%}
                                 <string>{{value}}</string>
                                 {% endfor %}
                             </a>
                         </choices>
                     </hudson.model.ChoiceParameterDefinition>
                     {% include './partials/jenkins/_parameters.txt' with context %}
            </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        {% include './partials/jenkins/_cron.txt' with context %}
    </properties>
    <concurrentBuild>false</concurrentBuild>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.65">
        <script>
import hudson.model.*
import hudson.model.AbstractProject
import hudson.tasks.Mailer

def build_ok = true

{% include './partials/scripts/_retry_function.groovy' with context %}


BUILD_JOB_NAME = "${JOB_NAME}"

pipeline {
    agent { node { label 'APP_RELEASE_iOS' } }
    stages {
        {% include './partials/scripts/_set_build_name.groovy' with context %}
        {% include './partials/scripts/_slack_notification_starting.groovy' with context %}
        stage('Preparation') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "${params.Branch}"]],
                    extensions: [[$class: 'CloneOption', timeout: 120]],
                    gitTool: 'Default',
                    userRemoteConfigs: [[url: '{{repository}}']]
                ])
            }
        }
        {% include './partials/scripts/ios/_unlock_keychain.groovy' with context %}
        {% include './partials/scripts/ios/_install_pods.groovy' with context %}
        stage ('Build Demo Release Candidate') {
            when {
                expression { params.Lane == 'DemoRC' }
            }
            steps {
                script {
                    try {
                        sh "export LANG=en_US.UTF-8 &amp;&amp; export FASTLANE_XCODE_LIST_TIMEOUT=120 &amp;&amp; export FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT=120 &amp;&amp; export FASTLANE_XCODEBUILD_SETTINGS_RETRIES=13 &amp;&amp; /usr/local/bin/fastlane demoRC"
                    } catch (exc) {
                        currentBuild.result = 'FAILED'
                        build_ok = false
                    }
                }
            }
        }
        stage ('Build Night') {
            when {
                expression { params.Lane == 'Night' }
            }
            steps {
                script {
                    try {
                        sh "export LANG=en_US.UTF-8 &amp;&amp; export FASTLANE_XCODE_LIST_TIMEOUT=120 &amp;&amp; export FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT=120 &amp;&amp; export FASTLANE_XCODEBUILD_SETTINGS_RETRIES=13 &amp;&amp; /usr/local/bin/fastlane night"
                    } catch (exc) {
                        currentBuild.result = 'FAILED'
                        build_ok = false
                    }
                }
            }
        }
        stage ('Build Release') {
            when {
                expression { params.Lane == 'Release' }
            }
            steps {
                script {
                    try {
                        sh "export LANG=en_US.UTF-8 &amp;&amp; export FASTLANE_XCODE_LIST_TIMEOUT=120 &amp;&amp; export FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT=120 &amp;&amp; export FASTLANE_XCODEBUILD_SETTINGS_RETRIES=13 &amp;&amp; /usr/local/bin/fastlane release"
                    } catch (exc) {
                        currentBuild.result = 'FAILED'
                        build_ok = false
                    }
                }
            }
        }
        stage ('Build Demo Night') {
            when {
                expression { params.Lane == 'Demo Night' }
            }
            steps {
                script {
                    try {
                        sh "export LANG=en_US.UTF-8 &amp;&amp; export FASTLANE_XCODE_LIST_TIMEOUT=120 &amp;&amp; export FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT=120 &amp;&amp; export FASTLANE_XCODEBUILD_SETTINGS_RETRIES=13 &amp;&amp; /usr/local/bin/fastlane demoNight"
                    } catch (exc) {
                        currentBuild.result = 'FAILED'
                        build_ok = false
                    }
                }
            }
        }
        {% include './partials/scripts/_slack_notification_finishing.groovy' with context %}
    }
}
        </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>