<flow-definition plugin="workflow-job@2.32">
    <actions/>
    <description/>
    <keepDependencies>false</keepDependencies>
    <properties>
        {% if log_rotate > 0 %}
            <jenkins.model.BuildDiscarderProperty>
                <strategy class="hudson.tasks.LogRotator">
                    <daysToKeep>-1</daysToKeep>
                    <numToKeep>{{log_rotate}}</numToKeep>
                    <artifactDaysToKeep>-1</artifactDaysToKeep>
                    <artifactNumToKeep>-1</artifactNumToKeep>
                </strategy>
            </jenkins.model.BuildDiscarderProperty>
        {% endif %}
        {% if show_parameters %}
        <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
                {% include './partials/jenkins/_parameters.txt' with context %}
            </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        {% endif %}
        {% include './partials/jenkins/_cron.txt' with context %}
    </properties>
    <concurrentBuild>false</concurrentBuild>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.65">
        <script>
import groovy.json.*

def build_ok = true

pipeline {
    agent { node { label '{{label}}' } }
    stages {
        {% include './partials/scripts/_set_build_name.groovy' with context %}
        {% include './partials/scripts/_slack_notification_starting.groovy' with context %}
        stage('Preparation') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "{{branch}}"]],
                    extensions: [[$class: 'CloneOption', timeout: 120]],
                    gitTool: 'Default',
                    userRemoteConfigs: [[url: '{{repository}}']]
                ])
            }
        }
        {% include './partials/scripts/_update_dashboard.groovy' with context %}
        stage('Tests') {
            steps {
                script {
                    try {
                        sh "{{mvn_path}} clean test {{maven_params}}"
                    } catch (exc) {
                        currentBuild.result = 'FAILED'
                        build_ok = false
                    }
                }
            }
        }
        stage('Results') {
            steps {
                script {
                    try {
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'target/surefire-reports/testng-results.xml'
                    } catch (exc) {}
                }
            }
        }
        {% if athenea.project_id != '' and athenea.environment_id != '' %}
        stage('Upload Report') {
            steps {
                script {
                    try {
                        sh 'cp target/surefire-reports/testng-results.xml ./report_{{athenea.project_id}}_{{athenea.environment_id}}_testng-results.xml'
                        {% if has_custom_subscribers %}
                        // Notify by email to additional subscribers
                        httpRequest consoleLogResponseBody: true, acceptType: 'APPLICATION_JSON_UTF8', contentType: 'APPLICATION_JSON_UTF8', httpMode: 'PUT', ignoreSslErrors: true, requestBody: '{"emails": ' + "${JsonOutput.toJson(params.Emails_To_Notify.split(','))}" +'}', responseHandle: 'NONE', url: 'https://us-central1-atenea-33daf.cloudfunctions.net/api/projects/{{athenea.project_id}}/environments/{{athenea.environment_id}}/notifications', validResponseCodes: '100:599'
                        {% endif %}
                        {% if update_execution_details %}
                        // Set execution details
                        httpRequest consoleLogResponseBody: true, acceptType: 'APPLICATION_JSON_UTF8', contentType: 'APPLICATION_JSON_UTF8', httpMode: 'PUT', ignoreSslErrors: true, requestBody: '{"subject": "'+"${params.Reason_Of_Execution}" + '","responsible": ""}', responseHandle: 'NONE', url: 'https://us-central1-atenea-33daf.cloudfunctions.net/api/projects/{{athenea.project_id}}/environments/{{athenea.environment_id}}/execution_details', validResponseCodes: '100:599'
                        {% endif %}
                        googleStorageUpload bucket: 'gs://atenea-33daf.appspot.com', credentialsId: 'Athenea', pattern: 'report_{{athenea.project_id}}_{{athenea.environment_id}}_testng-results.xml', sharedPublicly: true, showInline: true
                    } catch (exc) {}
                }
            }
        }
        {% endif %}
        {% include './partials/scripts/_slack_notification_finishing.groovy' with context %}
    }
}
        </script>
        <sandbox>false</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>