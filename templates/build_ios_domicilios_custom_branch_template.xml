<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
    <actions/>
    <description></description>
    <keepDependencies>false</keepDependencies>
    <properties>
        {% if log_rotate > 0 %}
            <jenkins.model.BuildDiscarderProperty>
                <strategy class="hudson.tasks.LogRotator">
                    <daysToKeep>-1</daysToKeep>
                    <numToKeep>{{log_rotate}}</numToKeep>
                    <artifactDaysToKeep>-1</artifactDaysToKeep>
                    <artifactNumToKeep>-1</artifactNumToKeep>
                </strategy>
            </jenkins.model.BuildDiscarderProperty>
        {% endif %}
        <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
        {% if show_parameters %}
        <hudson.model.ParametersDefinitionProperty>
             <parameterDefinitions>
                <hudson.model.StringParameterDefinition>
                    <name>Branch</name>
                    <description></description>
                    <defaultValue></defaultValue>
                    <trim>false</trim>
                </hudson.model.StringParameterDefinition>
                <hudson.model.BooleanParameterDefinition>
                    <name>Run_Tests</name>
                    <description>Ejecutar pruebas automatizadas en caso que la compilaci√≥n sea exitosa</description>
                    <defaultValue>true</defaultValue>
                </hudson.model.BooleanParameterDefinition>
                {% for p in parameters %}
                    {% if p['is_parameterizable'] %}
                        {% if p['type'] == 'string' %}
                            <hudson.model.StringParameterDefinition>
                                <name>{{p['name']}}</name>
                                <description>{{p['description']}}</description>
                                <defaultValue>{{p['default_value']}}</defaultValue>
                                <trim>false</trim>
                            </hudson.model.StringParameterDefinition>
                        {% endif %}
                        {% if p['type'] == 'boolean' %}
                            <hudson.model.BooleanParameterDefinition>
                                <name>{{p['name']}}</name>
                                <description>{{p['description']}}</description>
                                <defaultValue>{{p['default_value']}}</defaultValue>
                            </hudson.model.BooleanParameterDefinition>
                        {% endif %}
                        {% if p['type'] == 'choice' %}
                            <hudson.model.ChoiceParameterDefinition>
                                <name>{{p['name']}}</name>
                                <description>{{p['description']}}</description>
                                <choices class="java.util.Arrays$ArrayList">
                                    <a class="string-array">
                                        {% for value in p['values'] %}
                                            <string>{{value}}</string>
                                        {% endfor %}
                                    </a>
                                </choices>
                            </hudson.model.ChoiceParameterDefinition>
                        {% endif %}
                    {% endif %}
                {% endfor %}
            </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        {% endif %}
        {% if cron['poll_scm'] != '' %}
            <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
              <triggers>
                    <hudson.triggers.SCMTrigger>
                        <spec>{{cron['poll_scm']}}</spec>
                    </hudson.triggers.SCMTrigger>
              </triggers>
            </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        {% endif %}
    </properties>
    {% if cron['build'] != '' %}
        <triggers>
            <hudson.triggers.TimerTrigger>
                <spec>{{cron['build']}}</spec>
            </hudson.triggers.TimerTrigger>
        </triggers>
    {% endif %}
    <concurrentBuild>false</concurrentBuild>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.65">
        <script>
import hudson.model.*
import hudson.model.AbstractProject
import hudson.tasks.Mailer

def build_ok = true


BUILD_JOB_NAME = "${JOB_NAME}"

pipeline {
    agent { node { label '{{label}}' } }
    stages {
        stage('Slack Notification Starting') {
            steps {
                script {
                    slackSend channel: '{{slack_channel}}', message: "Build ${env.JOB_NAME.replace('/', ' > ')} - #${env.BUILD_DISPLAY_NAME} started (&lt;${env.BUILD_URL}|Open>)", color: '#439FE0', botUser: true, teamDomain: 'deliveryhero', tokenCredentialId: 'SlackToken'
                }
            }
        }
        stage('Preparation') {
            currentBuild.displayName = "Build_" + "${BUILD_TIMESTAMP}"
            checkout([$class: 'GitSCM',
                branches: [[name: "${params.Branch}"]],
                extensions: [[$class: 'CloneOption', timeout: 120]],
                gitTool: 'Default',
                userRemoteConfigs: [[url: '{{repository}}']]
            ])
        }
        stage('Install Pods') {
            steps {
                script {
                    try {
                        sh "rm Podfile.lock"
                        sh "export LANG=en_US.UTF-8 &amp;&amp; /usr/local/bin/pod repo update"
                        sh "export LANG=en_US.UTF-8 &amp;&amp; /usr/local/bin/pod install"
                    } catch (exc) {
                        currentBuild.result = 'FAILED'
                        build_ok = false
                    }
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    if(build_ok) {
                        try {
                            sh "/usr/bin/xcodebuild -scheme 'Domicilios Demo' -workspace './PedidosYa!.xcworkspace'  -configuration 'Debug' CODE_SIGN_IDENTITY='' CODE_SIGNING_REQUIRED=NO -derivedDataPath './' -destination 'id={{iphone_udid}}'"
                        } catch (exc) {
                            currentBuild.result = 'FAILED'
                            build_ok = false
                        }
                    }
                }
            }
        }
        stage('Publish') {
            steps {
                script {
                    if(build_ok) {
                        sh 'cd build/Products/Debug-iphonesimulator &amp;&amp; zip -r Domicilios.app.zip Domicilios.app'
                        sh 'mv build/Products/Debug-iphonesimulator/Domicilios.app.zip ./Domicilios.app.zip'
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'Domicilios.app.zip', onlyIfSuccessful: true
                    }
                }
            }
        }

        stage('Get App Version') {
            steps {
                script {
                    if(build_ok) {
                        def version = sh returnStdout: true, script: """
                        a=\$(grep -F -A1 "CFBundleShortVersionString" PedidosYa\\!/PedidosYa\\!-Info.plist | grep -v "&lt;key>")
                        b=\${a//&lt;string>/}
                        version=\${b//&lt;\\/string>/}
                        echo \$version
                        """
                        version = version.trim()
                        def bundle_version = sh returnStdout: true, script: """
                        a=\$(grep -F -A1 "CFBundleVersion" PedidosYa\\!/PedidosYa\\!-Info.plist | grep -v "&lt;key>")
                        b=\${a//&lt;string>/}
                        version=\${b//&lt;\\/string>/}
                        echo \$version
                        """
                        bundle_version = bundle_version.trim()
                        version = version + '_' + bundle_version
                        print('{"version": "' + version + '"}')
                        httpRequest consoleLogResponseBody: true, acceptType: 'APPLICATION_JSON_UTF8', contentType: 'APPLICATION_JSON_UTF8', httpMode: 'PUT', ignoreSslErrors: true, requestBody: '{"version": "' + version + '"}', responseHandle: 'NONE', url: 'https://us-central1-atenea-33daf.cloudfunctions.net/api/projects/{{athenea.project_id}}/environments/{{athenea.environment_id}}/version', validResponseCodes: '100:599'
                    }
                }
            }
        }
        {% if job_of_test != '' %}
        stage('Fire Tests') {
            steps {
                script {
                    if(build_ok) {
                        Jenkins.instance.getAllItems(AbstractItem.class).each {
                            if (BUILD_JOB_NAME == it.fullName) {
                                def user_id = it.getLastBuild().getCauses()[0].getUserId()

                                def u = User.get(user_id)
                                def user_name = it.getLastBuild().getCauses()[0].getUserName()
                                def user_email = u.getProperty(Mailer.UserProperty.class).getAddress()
                                def emails_to_notify = "${params.Emails_To_Notify}"
                                def jenkins_url = "{{jenkins_url}}"
                                build job:
                                    "{{job_of_test}}",
                                    parameters: [
                                        string(name: 'Suite', value: "${params.Test_To_Execute}"),
                                        string(name: 'App_Path', value: "${jenkins_url}{{job_path}}/${BUILD_NUMBER}/artifact"),
                                        booleanParam(name: 'Testrail_Flag', value: false),
                                        string(name: 'Emails_To_Notify', value: "${emails_to_notify}"),
                                        string(name: 'Reason_Of_Execution', value: "Ejecuci√≥n de pruebas automatizadas sobre el branch ¬´${params.Branch}¬ª"),
                                        string(name: 'Started_By', value: "")
                                    ],
                                    propagate: false,
                                    wait: false

                            }
                        };
                    }
                }
            }
        }
        {% endif %}
        stage('Slack Notification Finishing') {
            steps {
                script {
                    def status = ""
                    def color = ""
                    if(build_ok) {
                        status = "success"
                        color = "good"
                    } else {
                        status = "failed"
                        color = "danger"
                    }
                    slackSend channel: '{{slack_channel}}', message: "Build ${env.JOB_NAME.replace('/', ' > ')} - #${env.BUILD_DISPLAY_NAME} was ${status} after ${currentBuild.durationString.replace(' and counting', '')} (&lt;${env.BUILD_URL}|Open>)", color: "${color}", botUser: true, teamDomain: 'deliveryhero', tokenCredentialId: 'SlackToken'
                }
            }
        }
    }
}
        </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>