<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
    <actions/>
    <description></description>
    <keepDependencies>false</keepDependencies>
    <properties>
        {% if log_rotate > 0 %}
            <jenkins.model.BuildDiscarderProperty>
                <strategy class="hudson.tasks.LogRotator">
                    <daysToKeep>-1</daysToKeep>
                    <numToKeep>{{log_rotate}}</numToKeep>
                    <artifactDaysToKeep>-1</artifactDaysToKeep>
                    <artifactNumToKeep>-1</artifactNumToKeep>
                </strategy>
            </jenkins.model.BuildDiscarderProperty>
        {% endif %}
        <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
        {% if show_parameters %}
        <hudson.model.ParametersDefinitionProperty>
             <parameterDefinitions>
                 {% include './partials/jenkins/_parameters.txt' with context %}
            </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        {% endif %}
        {% include './partials/jenkins/_cron.txt' with context %}
    </properties>
    <concurrentBuild>false</concurrentBuild>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.65">
        <script>
import hudson.model.*
import hudson.model.AbstractProject
import hudson.tasks.Mailer

{% include './partials/scripts/_retry_function.groovy' with context %}

def build_ok = true


BUILD_JOB_NAME = "${JOB_NAME}"

pipeline {
    agent { node { label '{{label}}' } }
    stages {
        {% include './partials/scripts/_set_build_name.groovy' with context %}
        {% include './partials/scripts/_slack_notification_starting.groovy' with context %}
        stage('Preparation') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "{{branch}}"]],
                    extensions: [[$class: 'CloneOption', timeout: 120]],
                    gitTool: 'Default',
                    userRemoteConfigs: [[url: '{{repository}}']]
                ])
            }
        }
        {% include './partials/scripts/ios/_install_pods.groovy' with context %}
        {% if app_extension == '.app' %}
        stage('Build') {
            steps {
                script {
                    try {
                        sh "/usr/bin/xcodebuild -scheme 'PedidosYa! Demo' -workspace './PedidosYa!.xcworkspace'  -configuration 'Debug' CODE_SIGN_IDENTITY='' CODE_SIGNING_REQUIRED=NO -derivedDataPath './' -destination 'id={{iphone_udid}}'"
                    } catch (exc) {
                        currentBuild.result = 'FAILED'
                        build_ok = false
                    }
                }
            }
        }
        stage('Publish') {
            steps {
                script {
                    if(build_ok) {
                        sh 'cd build/Products/Debug-iphonesimulator &amp;&amp; zip -r PedidosYa!.app.zip PedidosYa!.app'
                        sh 'mv build/Products/Debug-iphonesimulator/PedidosYa!.app.zip ./PedidosYa.app.zip'
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'PedidosYa.app.zip', onlyIfSuccessful: true
                    }
                }
            }
        }
        {% endif %}

        {% if app_extension == '.ipa' %}
        stage('Build') {
            steps {
                script {
                    try {
                        sh "export LANG=en_US.UTF-8 &amp;&amp; export FASTLANE_XCODE_LIST_TIMEOUT=120 &amp;&amp; export FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT=120 &amp;&amp; export FASTLANE_XCODEBUILD_SETTINGS_RETRIES=13 &amp;&amp; /usr/local/bin/fastlane buildDemo scheme:\"PedidosYa! Demo\""
                    } catch (exc) {
                        currentBuild.result = 'FAILED'
                        build_ok = false
                    }
                }
            }
        }
        stage('Publish') {
            steps {
                script {
                    if(build_ok) {
                        sh 'mv PedidosYa\\!.ipa PedidosYa.ipa'
                        sh 'zip -r PedidosYa.ipa.zip PedidosYa.ipa'
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'PedidosYa.ipa.zip', onlyIfSuccessful: true
                    }
                }
            }
        }
        {% endif %}

        stage('Get App Version') {
            steps {
                script {
                    if(build_ok) {
                        def version = sh returnStdout: true, script: """
                        a=\$(grep -F -A1 "CFBundleShortVersionString" PedidosYa\\!/PedidosYa\\!-Info.plist | grep -v "&lt;key>")
                        b=\${a//&lt;string>/}
                        version=\${b//&lt;\\/string>/}
                        echo \$version
                        """
                        version = version.trim()
                        def bundle_version = sh returnStdout: true, script: """
                        a=\$(grep -F -A1 "CFBundleVersion" PedidosYa\\!/PedidosYa\\!-Info.plist | grep -v "&lt;key>")
                        b=\${a//&lt;string>/}
                        version=\${b//&lt;\\/string>/}
                        echo \$version
                        """
                        bundle_version = bundle_version.trim()
                        version = version + '_' + bundle_version
                        print('{"version": "' + version + '"}')
                        httpRequest consoleLogResponseBody: true, acceptType: 'APPLICATION_JSON_UTF8', contentType: 'APPLICATION_JSON_UTF8', httpMode: 'PUT', ignoreSslErrors: true, requestBody: '{"version": "' + version + '"}', responseHandle: 'NONE', url: 'https://us-central1-atenea-33daf.cloudfunctions.net/api/projects/{{athenea.project_id}}/environments/{{athenea.environment_id}}/version', validResponseCodes: '100:599'
                        {% if peya_app_id != '' %}
                        httpRequest consoleLogResponseBody: true, acceptType: 'APPLICATION_JSON_UTF8', contentType: 'APPLICATION_JSON_UTF8', httpMode: 'PUT', ignoreSslErrors: true, requestBody: '{"app_version": "' + version + '", "branch": "{{branch}}", "app_extension": "{{app_extension}}", "build_url": "{{jenkins_url}}{{job_path}}/lastSuccessfulBuild/artifact/PedidosYa.ipa.zip"}', responseHandle: 'NONE', url: 'https://us-central1-peyaapps.cloudfunctions.net/Api/apps/{{peya_app_id}}', validResponseCodes: '100:599'
                        {% endif %}
                    }
                }
            }
        }
        {% if job_of_test != '' %}
        stage('Fire Tests') {
            steps {
                script {
                    if(build_ok) {
                        def jenkins_url = "{{jenkins_url}}"
                        build job:
                        "{{job_of_test}}",
                        parameters: [
                        string(name: 'Suite', value: "REGRESSION"),
                        string(name: 'App_Path', value: "{{jenkins_url}}{{job_path}}/${BUILD_NUMBER}/artifact"),
                        string(name: 'App_Name', value: "PedidosYa{{app_extension}}.zip"),
                        string(name: 'Reason_Of_Execution', value: "Nueva versión de la aplicación")
                        ],
                        propagate: false,
                        wait: false
                    }
                }
            }
        }
        {% endif %}
        {% include './partials/scripts/_slack_notification_finishing.groovy' with context %}
    }
}
        </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>